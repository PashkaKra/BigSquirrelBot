const TelegramApi = require("node-telegram-bot-api");
const {loadImage, createCanvas} = require('canvas');
const fs = require("fs");
const chrono = require("chrono-node");
const getTeg = require("./getTeg");

const dotenv = require("dotenv");
dotenv.config();

const TOKEN = process.env.TOKEN;
const YAKEY = process.env.YAKEY;

const bot = new TelegramApi(TOKEN, {polling: true});
//const Img = 'https://www.yandex.ru/images/search?pos=0&from=tabbar&img_url=https%3A%2F%2Finfostart.ru%2Fupload%2Fiblock%2Ff0a%2Ff0a7a217efa125f37974167509cbc4cc.jpg&text=node-telegram-bot-api+%D0%BA%D0%B0%D0%BA+%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D0%B8%D1%82%D1%8C+%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8E+%D0%BA%D0%B0%D1%80%D1%82%D0%B8%D0%BD%D0%BA%D1%83+%D0%BF%D0%BE+url+%D1%81%D1%81%D1%8B%D0%BB%D0%BA%D0%B5&rpt=simage&lr=10738';

bot.setMyCommands([
    {command: '/start', description: 'start'},
    {command: '/get_action', description: '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–Ω–æ–Ω—Å'}
]);

let table = false;

const getAction = (title) => {
    const tableActions = [
        {action: "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", teg: "#–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π—Ç–µ–Ω–Ω–∏—Å", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /(–Ω–∞—Å—Ç–æ–ª—å–Ω).+(—Ç–µ–Ω–Ω–∏—Å)/i},
        {action: "–ü–∏–Ω–≥-–ø–æ–Ω–≥", teg: "#–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–π—Ç–µ–Ω–Ω–∏—Å", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /(–ø–∏–Ω–≥.–ø–æ–Ω–≥|–ø–∏–Ω–≥–ø–æ–Ω–≥)/i},
        {action: "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", teg: "#–±–∞–¥–º–∏–Ω—Ç–æ–Ω", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /–±–∞–¥–º–∏–Ω—Ç–æ–Ω/i},
        {action: "–°–∫–≤–æ—à", teg: "#—Å–∫–≤–æ—à", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /—Å–∫–≤–æ—à/i},
        {action: "–ö—Ä–æ—Å—Å–º–∏–Ω—Ç–æ–Ω", teg: "#–±–∞–¥–º–∏–Ω—Ç–æ–Ω", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /(–∫—Ä–æ—Å—Å–º–∏–Ω—Ç–æ–Ω|—Å–ø–∏–¥–º–∏–Ω—Ç–æ–Ω)/i},
        {action: "–ü–ª—è–∂–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", teg: "#—Ç–µ–Ω–Ω–∏—Å", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /(–ø–ª—è–∂–Ω).+(—Ç–µ–Ω–Ω–∏—Å)/i},
        {action: "–ü–∞–¥–µ–ª-—Ç–µ–Ω–Ω–∏—Å", teg: "#—Ç–µ–Ω–Ω–∏—Å", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /(–ø–∞–¥–µ–ª).+(—Ç–µ–Ω–Ω–∏—Å)/i},
        {action: "–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å", teg: "#—Ç–µ–Ω–Ω–∏—Å", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /—Ç–µ–Ω–Ω–∏—Å/i},
        {action: "–ü–∏–∫–ª–±–æ–ª", teg: "#—Ç–µ–Ω–Ω–∏—Å", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /–ø–∏–∫–ª–±–æ–ª/i},
        {action: "–õ–∞–ø—Ç–∞", teg: "#–ª–∞–ø—Ç–∞", link: "https://t.me/+6IclAEAzk_c0NTZi", chat: "üè∏–†–∞–∫–µ—Ç–∫–∏", patterns: /–ª–∞–ø—Ç/i},
        {action: "–ü–ª—è–∂–Ω—ã–π –≤–æ–ª–µ–π–±–æ–ª", teg: "#–≤–æ–ª–µ–π–±–æ–ª", link: "https://t.me/+jrN8B0CLicthNzM6", chat: "üèê–ú—è—á", patterns: /(–ø–ª—è–∂–Ω).+(–≤–æ–ª–µ–π–±–æ–ª)/i},
        {action: "–í–æ–ª–µ–π–±–æ–ª", teg: "#–≤–æ–ª–µ–π–±–æ–ª", link: "https://t.me/+jrN8B0CLicthNzM6", chat: "üèê–ú—è—á", patterns: /–≤–æ–ª–µ–π–±–æ–ª/i},
        {action: "–§—É—Ç–±–æ–ª", teg: "#—Ñ—É—Ç–±–æ–ª", link: "https://t.me/+jrN8B0CLicthNzM6", chat: "üèê–ú—è—á", patterns: /—Ñ—É—Ç–±–æ–ª/i},
        {action: "–ë–∞—Å–∫–µ—Ç–±–æ–ª", teg: "#–±–∞—Å–∫–µ—Ç–±–æ–ª", link: "https://t.me/+jrN8B0CLicthNzM6", chat: "üèê–ú—è—á", patterns: /(–±–∞—Å–∫–µ—Ç|—Å—Ç—Ä–∏—Ç–±–æ–ª)/i},
        {action: "–ì–∞–Ω–¥–±–æ–ª", teg: "#–±–∞—Å–∫–µ—Ç–±–æ–ª #—Ñ—É—Ç–±–æ–ª", link: "https://t.me/+jrN8B0CLicthNzM6", chat: "üèê–ú—è—á", patterns: /–≥–∞–Ω–¥–±–æ–ª/i},
    ];

    return(tableActions.find((item) => item.patterns.test(title)));
}

let Rackets = [
    {text: "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", teg: "#–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π—Ç–µ–Ω–Ω–∏—Å", data: false}, {text: "–ü–∏–Ω–≥-–ø–æ–Ω–≥", teg: "#–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π—Ç–µ–Ω–Ω–∏—Å", data: false},
    {text: "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", teg: "#–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", data: false}, {text: "–°–∫–≤–æ—à", teg: "#–°–∫–≤–æ—à", data: false},
    {text: "–ö—Ä–æ—Å—Å–º–∏–Ω—Ç–æ–Ω", teg: "#–ë–∞–¥–º–∏–Ω—Ç–æ–Ω", data: false}, {text: "–ü–ª—è–∂–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", teg: "#–¢–µ–Ω–Ω–∏—Å", data: false},
    {text: "–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å", teg: "#–¢–µ–Ω–Ω–∏—Å", data: false}, {text: "–ü–∞–¥–µ–ª-—Ç–µ–Ω–Ω–∏—Å", teg: "#–¢–µ–Ω–Ω–∏—Å", data: false},
    {text: "–ü–∏–∫–ª–±–æ–ª", teg: "#–¢–µ–Ω–Ω–∏—Å", data: false}, {text: "–õ–∞–ø—Ç–∞", teg: "#–õ–∞–ø—Ç–∞", data: false}
];

const actionMenu = {
    type: "",
    title: "",
    date: "",
    time: "",
    location: "",
    price: "",
    participants: "",
    lev: {
        beginners: "",
        fan: "",
        pro: ""
    },
    details: "",
    photo: "",
}

const getActionMenu = () => {return({
    reply_markup: {
        inline_keyboard: [
            //[{text: `–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è${actionMenu.type}`, callback_data: 'typeOfAction'}],
            [{text: `*üìñ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è${actionMenu.title}`, callback_data: 'titleOfAction'}],
            [{text: `*üìÜ –î–∞—Ç–∞${actionMenu.date}`, callback_data: 'dateOfAction'}],
            [{text: `*‚è∞ –í—Ä–µ–º—è${actionMenu.time}`, callback_data: 'timeOfAction'}],
            [{text: `*üìç –õ–æ–∫–∞—Ü–∏—è${actionMenu.location}`, callback_data: 'locationOfAction'}],
            [{text: `üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å${actionMenu.price}`, callback_data: 'priceOfAction'}],
            [{text: `üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤${actionMenu.participants}`, callback_data: 'numberOfParticipants'}],
            [{text: `ü•â –ù–æ–≤–∏—á–∫–∏${actionMenu.lev.beginners}`, callback_data: 'beginners'},
            {text: `ü•à –õ—é–±–∏—Ç–µ–ª–∏${actionMenu.lev.fan}`, callback_data: 'fan'},
            {text: `ü•á –ü—Ä–æ${actionMenu.lev.pro}`, callback_data: 'pro'},],
            [{text: `‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è${actionMenu.details}`, callback_data: 'detailsOfAction'}],
            [{text: `*üèû –§–æ—Ç–æ–æ–±–ª–æ–∂–∫–∞${actionMenu.photo}`, callback_data: 'photo'}],
            [{text: '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é', callback_data: 'getPrevie'}],
        ]
    }
})}
/*const changeActionState = (chatId, msgId, i, title) => {
    bot.deleteMessage(chatId, msgId);
    if(!Rackets[i].data){
        if(anonsInfo.action){
            let q = Rackets.findIndex(item => item.data == true);
            Rackets[q].data = false;
            Rackets[q].text = anonsInfo.action;
        }
        Rackets[i].data = true;
        Rackets[i].text = title + ' ‚úÖ';
        anonsInfo.action = title;
        anonsInfo.link = "https://t.me/+6IclAEAzk_c0NTZi";
        anonsInfo.chatTitle = "üè∏–†–∞–∫–µ—Ç–∫–∏";
        anonsInfo.categoryTeg = Rackets[i].teg;
        bot.sendMessage(chatId, '–í—ã–±–∏—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞', getRacketsMenu());
    }
    else{
        Rackets[i].data = false;
        Rackets[i].text = title;
        anonsInfo.action = false;
        anonsInfo.link = false;
        anonsInfo.chatTitle = false;
        anonsInfo.categoryTeg = false;
        bot.sendMessage(chatId, '–í—ã–±–∏—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞', getRacketsMenu());
    }
}*/

const changeLevelState = (chatId, msgId, levCat,) => {
    if(actionMenu.lev[levCat] === ""){
        actionMenu.lev[levCat] = ' ‚úÖ';
    }
    else{
        actionMenu.lev[levCat] = "";
    }
    bot.deleteMessage(chatId, msgId);
    bot.sendMessage(chatId, '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–æ–Ω—Å–∞', getActionMenu());
    setLevelState();
}

const br = `
`;

const setLevelState = () => {
    if(actionMenu.lev.beginners === ' ‚úÖ'
    && actionMenu.lev.fan === ' ‚úÖ'
    && actionMenu.lev.pro === ' ‚úÖ'){
        anonsInfo.level = `${br}üèÜ –ù–æ–≤–∏—á–∫–∏, –õ—é–±–∏—Ç–µ–ª–∏, –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã.`;
    }
    else if(actionMenu.lev.beginners === ' ‚úÖ'
    && actionMenu.lev.fan === ' ‚úÖ'){
        anonsInfo.level = `${br}üèÜ –ù–æ–≤–∏—á–∫–∏, –õ—é–±–∏—Ç–µ–ª–∏.`;
    }
    else if(actionMenu.lev.beginners === ' ‚úÖ'
    && actionMenu.lev.pro === ' ‚úÖ'){
        anonsInfo.level = `${br}üèÜ –ù–æ–≤–∏—á–∫–∏, –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã.`;
    }
    else if(actionMenu.lev.fan === ' ‚úÖ'
    && actionMenu.lev.pro === ' ‚úÖ'){
        anonsInfo.level = `${br}üèÜ –õ—é–±–∏—Ç–µ–ª–∏, –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã.`;
    }
    else if(actionMenu.lev.beginners === ' ‚úÖ'){
        anonsInfo.level = `${br}üèÜ –ù–æ–≤–∏—á–∫–∏.`;
    }
    else if(actionMenu.lev.fan === ' ‚úÖ'){
        anonsInfo.level = `${br}üèÜ –õ—é–±–∏—Ç–µ–ª–∏.`;
    }
    else if(actionMenu.lev.pro === ' ‚úÖ'){
        anonsInfo.level = `${br}üèÜ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã.`;
    }
    else{
        anonsInfo.level = "";
    }
}

const getRacketsMenu = () => {return ({
    reply_markup: {
        inline_keyboard: [
            /*[{text: "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å", callback_data: 'tableTennis'}, {text: '–ü–∏–Ω–≥-–ø–æ–Ω–≥', callback_data: 'ping_pong'}],
            [{text: '–ë–∞–¥–º–∏–Ω—Ç–æ–Ω', callback_data: 'badminton'}, {text: '–°–∫–≤–æ—à', callback_data: 'squash'}],
            [{text: '–ö—Ä–æ—Å—Å–º–∏–Ω—Ç–æ–Ω', callback_data: 'crossminton'}, {text: '–ü–ª—è–∂–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å', callback_data: 'beachTennis'}],
            [{text: '–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å', callback_data: 'bigTennis'}, {text: '–ü–∞–¥–µ–ª-—Ç–µ–Ω–Ω–∏—Å', callback_data: 'padel'}], 
            [{text: '–ü–∏–∫–ª–±–æ–ª', callback_data: 'picklball'}, {text: '–õ–∞–ø—Ç–∞', callback_data: 'lapta'}],*/
            [{text: Rackets[0].text, callback_data: 'tableTennis'}, {text: Rackets[1].text, callback_data: 'ping_pong'}],
            [{text: Rackets[2].text, callback_data: 'badminton'}, {text: Rackets[3].text, callback_data: 'squash'}],
            [{text: Rackets[4].text, callback_data: 'crossminton'}, {text: Rackets[5].text, callback_data: 'beachTennis'}],
            [{text: Rackets[6].text, callback_data: 'bigTennis'}, {text: Rackets[7].text, callback_data: 'padel'}], 
            [{text: Rackets[8].text, callback_data: 'picklball'}, {text: Rackets[9].text, callback_data: 'lapta'}],
            [{text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: 'next'}],
        ]
    }
})}

/*const numberOfParticipants = {
    reply_markup: {
        inline_keyboard: [
            [{text: '0 ', callback_data: 'tableTennis'}, {text: Rackets[1].text, callback_data: 'ping_pong'}],
        ]
    }
}*/

const nextButton = {
    reply_markup: {
        inline_keyboard: [[{text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: 'next'}]]
    }
}

const previewMenu = {
    reply_markup: {
        inline_keyboard: [
            [{text: '–î–∞–ª–µ–µ ‚û°Ô∏è', callback_data: 'next'}, {text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å üì§', callback_data: 'send'}],
        ]
    }
}

const startMenu ={
    reply_markup:{
        keyboard: [
            [{text: '–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞–∏—é'}]
        ]
    }
}

const events_categories = {
    reply_markup: {
        keyboard: [
            [{text: '–†–∞–∫–µ—Ç–∫–∏'}, {text: '–ú—è—á'}, {text: '–ö–æ–ª—ë—Å–∞'}],
            [{text: '–°—ë—Ä—Ñ –∏ —Å–ø–ª–∞–≤—ã'}, {text: '–ì–æ—Ä–Ω–æ–ª—ã–∂–∫–∞'}, {text: '–ü–æ—Ö–æ–¥—ã'}],
        ]
    }
}
const rackets_categories = {
    reply_markup: {
        keyboard: [
            [{text: '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å'}, {text: '–ü–∏–Ω–≥-–ø–æ–Ω–≥'}, {text: '–ë–∞–¥–º–∏–Ω—Ç–æ–Ω'}, {text: '–°–∫–≤–æ—à'}],
            [{text: '–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å'}, {text: '–ü–∞–¥–µ–ª-—Ç–µ–Ω–Ω–∏—Å'}, {text: '–ö—Ä–æ—Å—Å–º–∏–Ω—Ç–æ–Ω'}],
            [{text: '–ü–ª—è–∂–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å'}, {text: '–ü–∏–∫–ª–±–æ–ª'}, {text: '–õ–∞–ø—Ç–∞'}],
        ]
    }
}
const ball_categories = {
    reply_markup: {
        keyboard: [
            [{text: '–í–æ–ª–µ–π–±–æ–ª'}, {text: '–ë–∞—Å–∫–µ—Ç–±–æ–ª'}, {text: '–§—É—Ç–±–æ–ª'}],
            [{text: '–ü–ª—è–∂–Ω—ã–π –≤–æ–ª–µ–π–±–æ–ª'}, {text: '–ì–∞–Ω–¥–±–æ–ª'}]
        ]
    }
}
const anonsInfoInit = () => {
    return({
        title: "",
        user: "",
        username: "",
        date: "",
        time: "",
        location: "",
        locCoordinates: "",
        price: "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ",
        participants: false,
        link: "",
        chatTitle: "",
        categoryTeg: "",
        level: '',
        details: '',
        photo: '',
    });
}

let anonsInfo = anonsInfoInit();
const getText = () => {
let announce = `<strong>${anonsInfo.date} - ${anonsInfo.title}</strong>
üßë‚Äçüíº–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: @${anonsInfo.user} (${anonsInfo.username})

‚è∞ ${anonsInfo.time}
üìç <a href="https://yandex.ru/maps/?pt=${anonsInfo.locCoordinates}&z=14&l=map">${anonsInfo.location}</a>
üí∏ ${anonsInfo.price}
üë• ${anonsInfo.participants}${anonsInfo.level}` + br + br;

if(anonsInfo.details !== ""){announce += '‚ûï' + anonsInfo.details + br + br;}

announce += `üìù–ß–∞—Ç: <a href="${anonsInfo.link}">${anonsInfo.chatTitle}</a>
‚≠êÔ∏è<strong>–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: @na_fanere_bot</strong>`;

if(anonsInfo.categoryTeg !== ""){announce += br + anonsInfo.categoryTeg;}
return announce;   
}

let messId;
let get_title_flag = false;
let get_date_flag = false;
let get_time_flag = false;
let get_location_flag = false;
let get_price_flag = false;
let get_participants_flag = false;
let details_flag = false;
let photo_flag = false;

bot.on('message', async msg => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const success_mes = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ üéâ`
    //bot.sendMessage(chatId, `result - ${tableActions[1].patterns.test(text)}`);
    if(text === '/start'){
        bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞–∏—é');
    }
    if(text === '/get_action'){
    //bot.on('/get_action', async msg => {
    //    messId = msg.message_id;
    //    console.log(`messageId is ${messId}`)
        anonsInfo = anonsInfoInit();
        actionMenu.type = "";
        actionMenu.title = "";
        actionMenu.date = "";
        actionMenu.time = "";
        actionMenu.location = "";
        actionMenu.price = "";
        actionMenu.participants = "";
        actionMenu.lev.beginners = "";
        actionMenu.lev.fan = "";
        actionMenu.lev.pro = "";
        actionMenu.details = "";
        actionMenu.photo = "";
        bot.sendMessage(chatId, '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–æ–Ω—Å–∞', getActionMenu());
        console.log(`message ${text}`);
    //})
         
    }

    if(get_title_flag){
        get_title_flag = false;
        actionMenu.title = ' ‚úÖ';
        const action_data = getAction(text);
        anonsInfo.title = text;
        if(action_data){
            anonsInfo.link = action_data.link;
            anonsInfo.chatTitle = action_data.chat;
            anonsInfo.categoryTeg = action_data.teg;
        }
        else{
            anonsInfo.link = `https://t.me/+nVgj6aipar04MjRi`
            anonsInfo.chatTitle = `üèÑ‚Äç‚ôÇÔ∏è –§–ê–ù–µ—Ä–Ω—ã–π —á–∞—Ç üèÇ`;
        }
        bot.sendMessage(chatId, success_mes);        
    }
    if(get_date_flag){
        get_date_flag = false;
        actionMenu.date = ' ‚úÖ';
        anonsInfo.date = text;
        bot.sendMessage(chatId, success_mes);
    }
    if(get_time_flag){
        get_time_flag = false;
        actionMenu.time = ' ‚úÖ';
        anonsInfo.time = text;
        bot.sendMessage(chatId, success_mes);
    }
    if(get_location_flag){
        get_location_flag = false;
        actionMenu.location = ' ‚úÖ';
        //console.log(msg);
        anonsInfo.locCoordinates = await getLocCoordinates(text);
        bot.sendMessage(chatId, anonsInfo.locLink);
        anonsInfo.location = text;
        bot.sendMessage(chatId, success_mes);
    }
    if(get_price_flag){
        get_price_flag = false;
        actionMenu.price = ' ‚úÖ';
        anonsInfo.price = text;
        bot.sendMessage(chatId, success_mes);
    }

    if(get_participants_flag){
        get_participants_flag = false;
        actionMenu.participants = ' ‚úÖ';
        anonsInfo.participants = text;
        bot.sendMessage(chatId, success_mes);
    }

    if(details_flag){
        details_flag = false;
        actionMenu.details = ' ‚úÖ';
        anonsInfo.details = text;
        bot.sendMessage(chatId, success_mes);
    }
});

let Img;

bot.on('photo', async msg => {
    const chatId = msg.chat.id;
    const success_mes = `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ üéâ`;
    if(photo_flag){
        photo_flag = false;
        const koef = 1;
        photoId = msg.photo[msg.photo.length-1].file_id;
        const image = await bot.getFile(photoId);
		const FILE_PATH = `https://api.telegram.org/file/bot${TOKEN}/${image.file_path}`;
		const Img1 = await loadImage(FILE_PATH);
		const Img2 = await loadImage(`src/public/logo/logo.png`);
        const width = Img1.width;
        const height = Img1.height;
        const k = (height - width)+width*14/100;
        const canvas = createCanvas(width, height+width*14/100);
		const context = canvas.getContext('2d');
		context.drawImage(Img1, 0, 0, width, height);
        context.drawImage(Img2, 0, k, width, width);
		context.fillStyle = "#e85d17";

        context.font = `${width*koef/18}pt Ralev001`;
		context.fillText(anonsInfo.title, 25, height-koef+width/10);

        context.fillStyle = "white";
        context.font = `${width/17}pt Ralev001`;
		context.fillText(anonsInfo.date, width/1.29, height+width*0.08);

        const imgBuffer = canvas.toBuffer('image/jpeg');
        anonsInfo.photo = `src/public/${image.file_path}`;
		fs.writeFileSync(anonsInfo.photo, imgBuffer);
        bot.sendMessage(chatId, success_mes);
    }
})

const getLocCoordinates = async (adr) => {
    const res = await fetch(`https://geocode-maps.yandex.ru/1.x/?apikey=${YAKEY}&geocode=${adr.replace(" ", "+")}&format=json`);
    const data = await res.json();
    coord = data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.replace(" ", ",");
    return coord;
}
     
bot.on('callback_query', async msg => {
    const chatId = msg.message.chat.id;
    const msgId = msg.message.message_id;
    const data = msg.data;
    
    if(anonsInfo.user === "") {anonsInfo.user = msg.from.username;}
    if(anonsInfo.username === "") {anonsInfo.username = msg.from.first_name;}
    //console.log(chrono.parseDate('An appointment on Sep 12-13'));
    console.log(chrono.ru.parseDate('25.10.23')); 
    console.log(chrono.ru.parseDate('c 25.10 –ø–æ 23.11')); 
    console.log(msg);
    console.log(data);
    switch(data){
        /*case 'typeOfAction':
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–í—ã–±–∏—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞', getRacketsMenu());
            break;
        case 'tableTennis': changeActionState(chatId, msgId, 0, "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å"); break;
        case 'ping_pong': changeActionState(chatId, msgId, 1, "–ü–∏–Ω–≥-–ø–æ–Ω–≥"); break;
        case 'badminton': changeActionState(chatId, msgId, 2, "–ë–∞–¥–º–∏–Ω—Ç–æ–Ω"); break;
        case 'squash': changeActionState(chatId, msgId, 3, "–°–∫–≤–æ—à"); break;
        case 'crossminton': changeActionState(chatId, msgId, 4, "–ö—Ä–æ—Å—Å–º–∏–Ω—Ç–æ–Ω"); break;
        case 'beachTennis': changeActionState(chatId, msgId, 5, "–ü–ª—è–∂–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å"); break;
        case 'bigTennis': changeActionState(chatId, msgId, 6, "–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å"); break;
        case 'padel': changeActionState(chatId, msgId, 7, "–ü–∞–¥–µ–ª-—Ç–µ–Ω–Ω–∏—Å"); break;
        case 'picklball': changeActionState(chatId, msgId, 8, "–ü–∏–∫–ª–±–æ–ª"); break;
        case 'lapta': changeActionState(chatId, msgId, 9, "–õ–∞–ø—Ç–∞"); break;*/    
        case 'next':
            bot.deleteMessage(chatId, msg.message.message_id);
            //actionMenu.title = anonsInfo.title ? ' ‚úÖ' : '';
            //actionMenu.photo = anonsInfo.photo ? ' ‚úÖ' : '';
            bot.sendMessage(chatId, `–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–æ–Ω—Å–∞.${br}–ü–æ–∑–∏—Ü–∏–∏ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º "*" - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!`, getActionMenu());
            break;
        case 'titleOfAction': 
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', nextButton);
            get_title_flag = true;
            break;
        case 'dateOfAction': 
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', nextButton);
            get_date_flag = true;
            break;
        case 'timeOfAction': 
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', nextButton);
            get_time_flag = true;
            break;
        case 'locationOfAction': 
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', nextButton);
            get_location_flag = true;
            //let lok = await yaLock();
            break;
        case 'priceOfAction': 
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏', nextButton);
            get_price_flag = true;
            break;
        case 'numberOfParticipants': 
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', nextButton);
            get_participants_flag = true;
            break;
        case 'beginners': 
            changeLevelState(chatId, msgId, 'beginners');
            break;
        case 'fan': 
            changeLevelState(chatId, msgId, 'fan');
            break;
        case 'pro': 
            changeLevelState(chatId, msgId, 'pro');
            break;
        case 'detailsOfAction':
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –∞–Ω–æ–Ω—Å—É', nextButton);
            details_flag = true;
            break;
        case 'photo':
            photo_flag = true; 
            bot.deleteMessage(chatId, msgId);
            bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–±–ª–æ–∂–∫–∏ –∞–Ω–æ–Ω—Å–∞', nextButton);
            break;
        case 'getPrevie':
            //console.log(anonsInfo.photo);
            if(anonsInfo.photo !== ""  
           /*&& anonsInfo.title !== ""
            && anonsInfo.date !== ""
            && anonsInfo.time !== ""
            && anonsInfo.location !== ""*/){
                await bot.sendPhoto(chatId, fs.readFileSync(anonsInfo.photo), {caption: getText(), parse_mode: 'HTML'});
                await bot.sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–Ω–æ–Ω—Å –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", previewMenu);
            }
            else{
                bot.sendMessage(chatId, `–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!`);
            }
            break;

        default:
            console.log("test");
    //        bot.deleteMessage(chatId, )
    }
    //bot.sendMessage(chatId, data);
});

/*const getPhoto = () => {
    bot.on('photo', async msg => {
	    const chatId = msg.chat.id;
	    const caption = msg.caption;
        const photoId = msg.photo[msg.photo.length-1].file_id;
        const image = await bot.getFile(photoId);
	    const FILE_PATH = `https://api.telegram.org/file/bot${TOKEN}/${image.file_path}`;
        //const Img1 = await loadImage(FILE_PATH);

        bot.sendMessage(chatId, '–í—ã–±–∏—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', events_categories);
        bot.on('message', async msg => {
            const CHAT_TITLE = msg.text;
            let event_category;
            let chatLink;
            switch(CHAT_TITLE){
                case '–†–∞–∫–µ—Ç–∫–∏':
                    event_category = rackets_categories;
                    chatLink = 'https://t.me/+6IclAEAzk_c0NTZi';
                    break;
                case '–ú—è—á':
                    event_category = ball_categories;
                    chatLink = 'https://t.me/+jrN8B0CLicthNzM6';
                    break;
            }
            bot.sendMessage(chatId, '–í—ã–±–∏—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:', event_category);
            console.log(FILE_PATH);
            bot.on('message', async msg => {
                const text = msg.text;
                const user = msg.from.username;
                console.log(msg);
                let teg = getTeg(text);
                bot.on('message', async msg => {
                    await bot.sendPhoto(chatId, Img, {caption: getText(text, CHAT_TITLE, chatLink, user, teg), parse_mode: 'HTML'});
                });
            });
        });
    });
}*/
